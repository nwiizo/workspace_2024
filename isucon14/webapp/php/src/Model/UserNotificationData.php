<?php
/**
 * UserNotificationData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IsuRide
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ISURIDE API Specification
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IsuRide\Model;

use \ArrayAccess;
use \IsuRide\ObjectSerializer;

/**
 * UserNotificationData Class Doc Comment
 *
 * @category Class
 * @description ユーザー向け通知データ
 * @package  IsuRide
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserNotificationData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserNotificationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ride_id' => 'string',
        'pickup_coordinate' => '\IsuRide\Model\Coordinate',
        'destination_coordinate' => '\IsuRide\Model\Coordinate',
        'fare' => 'int',
        'status' => '\IsuRide\Model\RideStatus',
        'chair' => '\IsuRide\Model\UserNotificationDataChair',
        'created_at' => 'int',
        'updated_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ride_id' => null,
        'pickup_coordinate' => null,
        'destination_coordinate' => null,
        'fare' => null,
        'status' => null,
        'chair' => null,
        'created_at' => 'int64',
        'updated_at' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ride_id' => false,
        'pickup_coordinate' => false,
        'destination_coordinate' => false,
        'fare' => false,
        'status' => false,
        'chair' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ride_id' => 'ride_id',
        'pickup_coordinate' => 'pickup_coordinate',
        'destination_coordinate' => 'destination_coordinate',
        'fare' => 'fare',
        'status' => 'status',
        'chair' => 'chair',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ride_id' => 'setRideId',
        'pickup_coordinate' => 'setPickupCoordinate',
        'destination_coordinate' => 'setDestinationCoordinate',
        'fare' => 'setFare',
        'status' => 'setStatus',
        'chair' => 'setChair',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ride_id' => 'getRideId',
        'pickup_coordinate' => 'getPickupCoordinate',
        'destination_coordinate' => 'getDestinationCoordinate',
        'fare' => 'getFare',
        'status' => 'getStatus',
        'chair' => 'getChair',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ride_id', $data ?? [], null);
        $this->setIfExists('pickup_coordinate', $data ?? [], null);
        $this->setIfExists('destination_coordinate', $data ?? [], null);
        $this->setIfExists('fare', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('chair', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ride_id'] === null) {
            $invalidProperties[] = "'ride_id' can't be null";
        }
        if ($this->container['pickup_coordinate'] === null) {
            $invalidProperties[] = "'pickup_coordinate' can't be null";
        }
        if ($this->container['destination_coordinate'] === null) {
            $invalidProperties[] = "'destination_coordinate' can't be null";
        }
        if ($this->container['fare'] === null) {
            $invalidProperties[] = "'fare' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ride_id
     *
     * @return string
     */
    public function getRideId()
    {
        return $this->container['ride_id'];
    }

    /**
     * Sets ride_id
     *
     * @param string $ride_id ライドID
     *
     * @return self
     */
    public function setRideId($ride_id)
    {
        if (is_null($ride_id)) {
            throw new \InvalidArgumentException('non-nullable ride_id cannot be null');
        }
        $this->container['ride_id'] = $ride_id;

        return $this;
    }

    /**
     * Gets pickup_coordinate
     *
     * @return \IsuRide\Model\Coordinate
     */
    public function getPickupCoordinate()
    {
        return $this->container['pickup_coordinate'];
    }

    /**
     * Sets pickup_coordinate
     *
     * @param \IsuRide\Model\Coordinate $pickup_coordinate pickup_coordinate
     *
     * @return self
     */
    public function setPickupCoordinate($pickup_coordinate)
    {
        if (is_null($pickup_coordinate)) {
            throw new \InvalidArgumentException('non-nullable pickup_coordinate cannot be null');
        }
        $this->container['pickup_coordinate'] = $pickup_coordinate;

        return $this;
    }

    /**
     * Gets destination_coordinate
     *
     * @return \IsuRide\Model\Coordinate
     */
    public function getDestinationCoordinate()
    {
        return $this->container['destination_coordinate'];
    }

    /**
     * Sets destination_coordinate
     *
     * @param \IsuRide\Model\Coordinate $destination_coordinate destination_coordinate
     *
     * @return self
     */
    public function setDestinationCoordinate($destination_coordinate)
    {
        if (is_null($destination_coordinate)) {
            throw new \InvalidArgumentException('non-nullable destination_coordinate cannot be null');
        }
        $this->container['destination_coordinate'] = $destination_coordinate;

        return $this;
    }

    /**
     * Gets fare
     *
     * @return int
     */
    public function getFare()
    {
        return $this->container['fare'];
    }

    /**
     * Sets fare
     *
     * @param int $fare 運賃(割引後)
     *
     * @return self
     */
    public function setFare($fare)
    {
        if (is_null($fare)) {
            throw new \InvalidArgumentException('non-nullable fare cannot be null');
        }
        $this->container['fare'] = $fare;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \IsuRide\Model\RideStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \IsuRide\Model\RideStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets chair
     *
     * @return \IsuRide\Model\UserNotificationDataChair|null
     */
    public function getChair()
    {
        return $this->container['chair'];
    }

    /**
     * Sets chair
     *
     * @param \IsuRide\Model\UserNotificationDataChair|null $chair chair
     *
     * @return self
     */
    public function setChair($chair)
    {
        if (is_null($chair)) {
            throw new \InvalidArgumentException('non-nullable chair cannot be null');
        }
        $this->container['chair'] = $chair;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at 配車要求日時
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int $updated_at 配車要求更新日時
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


